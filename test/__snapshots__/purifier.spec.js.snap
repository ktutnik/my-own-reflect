// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Purifier Decorators Should able to add class decorator 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [
    Object {
      "timeout": 10,
      Symbol(tinspector:decoratorOption): Object {
        "allowMultiple": true,
        "inherit": true,
      },
    },
    Object {
      "cache": 10,
      Symbol(tinspector:decoratorOption): Object {
        "allowMultiple": true,
        "inherit": true,
      },
    },
  ],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Decorators Should able to add decorator on constructor parameter 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [
      Object {
        "decorators": Array [
          Object {
            "timeout": 10,
            Symbol(tinspector:decoratorOption): Object {
              "allowMultiple": true,
              "inherit": true,
            },
          },
          Object {
            "cache": 10,
            Symbol(tinspector:decoratorOption): Object {
              "allowMultiple": true,
              "inherit": true,
            },
          },
        ],
        "fields": Object {},
        "index": 0,
        "kind": "Parameter",
        "name": "par1",
        "owner": Array [
          MyClass,
        ],
        "type": undefined,
      },
    ],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [
        Object {
          "timeout": 10,
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": true,
            "inherit": true,
          },
        },
        Object {
          "cache": 10,
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": true,
            "inherit": true,
          },
        },
      ],
      "get": undefined,
      "index": 0,
      "isParameter": true,
      "kind": "Property",
      "name": "par1",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
      "type": undefined,
    },
  ],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Decorators Should able to add getter decorator 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [
        Object {
          "timeout": 10,
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": true,
            "inherit": true,
          },
        },
        Object {
          "cache": 10,
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": true,
            "inherit": true,
          },
        },
      ],
      "get": get prop,
      "kind": "Property",
      "name": "prop",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
    },
  ],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Decorators Should able to add method decorator 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [
        Object {
          "timeout": 10,
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": true,
            "inherit": true,
          },
        },
        Object {
          "cache": 10,
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": true,
            "inherit": true,
          },
        },
      ],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        MyClass,
      ],
      "parameters": Array [],
      "returnType": undefined,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Decorators Should able to add parameter decorator on method 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        MyClass,
      ],
      "parameters": Array [
        Object {
          "decorators": Array [
            Object {
              "timeout": 10,
              Symbol(tinspector:decoratorOption): Object {
                "allowMultiple": true,
                "inherit": true,
              },
            },
            Object {
              "cache": 10,
              Symbol(tinspector:decoratorOption): Object {
                "allowMultiple": true,
                "inherit": true,
              },
            },
          ],
          "fields": Object {},
          "index": 0,
          "kind": "Parameter",
          "name": "par1",
          "owner": Array [
            MyClass,
          ],
          "type": undefined,
        },
      ],
      "returnType": undefined,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Decorators Should able to add property decorator 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [
        Object {
          "timeout": 10,
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": true,
            "inherit": true,
          },
        },
        Object {
          "cache": 10,
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": true,
            "inherit": true,
          },
        },
      ],
      "get": undefined,
      "kind": "Property",
      "name": "prop",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
    },
  ],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Decorators and Inheritance Should able to add class decorator 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [
    Object {
      "timeout": 10,
      Symbol(tinspector:decoratorOption): Object {
        "allowMultiple": true,
        "inherit": true,
      },
    },
    Object {
      "cache": 10,
      Symbol(tinspector:decoratorOption): Object {
        "allowMultiple": true,
        "inherit": true,
      },
    },
  ],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Decorators and Inheritance Should able to merge multiple decorator when specified on class 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [
    Object {
      "timeout": 11,
      Symbol(tinspector:decoratorId): "id",
      Symbol(tinspector:decoratorOption): Object {
        "allowMultiple": false,
        "inherit": true,
      },
    },
  ],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Decorators and Inheritance Should able to merge multiple decorator when specified on member 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [
        Object {
          "timeout": 11,
          Symbol(tinspector:decoratorId): "id",
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": false,
            "inherit": true,
          },
        },
      ],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        SuperClass,
        MyClass,
      ],
      "parameters": Array [],
      "returnType": undefined,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Decorators and Inheritance Should able to skip decorator inheritance in class 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Decorators and Inheritance Should able to skip decorator inheritance in deep inheritance 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        GrandSuperClass,
      ],
      "parameters": Array [],
      "returnType": undefined,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    Object,
    GrandSuperClass,
    SuperClass,
    MyClass,
  ],
  "properties": Array [],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Decorators and Inheritance Should able to skip decorator inheritance in members 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        SuperClass,
      ],
      "parameters": Array [],
      "returnType": undefined,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Design Type Information Should able to add constructor parameter type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 0,
        "kind": "Parameter",
        "name": "par1",
        "owner": Array [
          MyClass,
        ],
        "type": String,
      },
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 1,
        "kind": "Parameter",
        "name": "par2",
        "owner": Array [
          MyClass,
        ],
        "type": Number,
      },
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 2,
        "kind": "Parameter",
        "name": "par3",
        "owner": Array [
          MyClass,
        ],
        "type": Boolean,
      },
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 3,
        "kind": "Parameter",
        "name": "par4",
        "owner": Array [
          MyClass,
        ],
        "type": Date,
      },
    ],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 0,
      "isParameter": true,
      "kind": "Property",
      "name": "par1",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
      "type": String,
    },
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 1,
      "isParameter": true,
      "kind": "Property",
      "name": "par2",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
      "type": Number,
    },
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 2,
      "isParameter": true,
      "kind": "Property",
      "name": "par3",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
      "type": Boolean,
    },
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 3,
      "isParameter": true,
      "kind": "Property",
      "name": "par4",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
      "type": Date,
    },
  ],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Design Type Information Should able to add field property type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [],
      "get": undefined,
      "kind": "Property",
      "name": "prop",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
      "type": Number,
    },
  ],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Design Type Information Should able to add getter setter type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [],
      "get": get getter,
      "kind": "Property",
      "name": "getter",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
      "type": Number,
    },
  ],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Design Type Information Should able to add method parameter type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        MyClass,
      ],
      "parameters": Array [
        Object {
          "decorators": Array [],
          "fields": Object {},
          "index": 0,
          "kind": "Parameter",
          "name": "par1",
          "owner": Array [
            MyClass,
          ],
          "type": String,
        },
        Object {
          "decorators": Array [],
          "fields": Object {},
          "index": 1,
          "kind": "Parameter",
          "name": "par2",
          "owner": Array [
            MyClass,
          ],
          "type": Number,
        },
        Object {
          "decorators": Array [],
          "fields": Object {},
          "index": 2,
          "kind": "Parameter",
          "name": "par3",
          "owner": Array [
            MyClass,
          ],
          "type": Boolean,
        },
        Object {
          "decorators": Array [],
          "fields": Object {},
          "index": 3,
          "kind": "Parameter",
          "name": "par4",
          "owner": Array [
            MyClass,
          ],
          "type": Date,
        },
      ],
      "returnType": undefined,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Design Type Information Should able to add method return type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        MyClass,
      ],
      "parameters": Array [],
      "returnType": Number,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Design Type Information and Inheritance Should able to add inherited field property type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [],
      "get": undefined,
      "kind": "Property",
      "name": "prop",
      "owner": Array [
        SuperClass,
      ],
      "set": undefined,
      "type": Number,
    },
  ],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Design Type Information and Inheritance Should able to add inherited getter setter type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [],
      "get": get getter,
      "kind": "Property",
      "name": "getter",
      "owner": Array [
        SuperClass,
      ],
      "set": undefined,
      "type": Number,
    },
  ],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Design Type Information and Inheritance Should able to add inherited method parameter type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        SuperClass,
      ],
      "parameters": Array [
        Object {
          "decorators": Array [],
          "fields": Object {},
          "index": 0,
          "kind": "Parameter",
          "name": "par1",
          "owner": Array [
            SuperClass,
          ],
          "type": String,
        },
        Object {
          "decorators": Array [],
          "fields": Object {},
          "index": 1,
          "kind": "Parameter",
          "name": "par2",
          "owner": Array [
            SuperClass,
          ],
          "type": Number,
        },
        Object {
          "decorators": Array [],
          "fields": Object {},
          "index": 2,
          "kind": "Parameter",
          "name": "par3",
          "owner": Array [
            SuperClass,
          ],
          "type": Boolean,
        },
        Object {
          "decorators": Array [],
          "fields": Object {},
          "index": 3,
          "kind": "Parameter",
          "name": "par4",
          "owner": Array [
            SuperClass,
          ],
          "type": Date,
        },
      ],
      "returnType": undefined,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Design Type Information and Inheritance Should able to add inherited method return type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        SuperClass,
      ],
      "parameters": Array [],
      "returnType": Number,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Design Type Information and Inheritance Should able to add overridden field property type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [],
      "get": undefined,
      "kind": "Property",
      "name": "prop",
      "owner": Array [
        SuperClass,
        MyClass,
      ],
      "set": undefined,
      "type": Number,
    },
  ],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Design Type Information and Inheritance Should able to add overridden getter setter type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [],
      "get": get getter,
      "kind": "Property",
      "name": "getter",
      "owner": Array [
        SuperClass,
        MyClass,
      ],
      "set": undefined,
      "type": Number,
    },
  ],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Design Type Information and Inheritance Should able to add overridden method parameter type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        SuperClass,
        MyClass,
      ],
      "parameters": Array [
        Object {
          "decorators": Array [],
          "fields": Object {},
          "index": 0,
          "kind": "Parameter",
          "name": "par1",
          "owner": Array [
            SuperClass,
            MyClass,
          ],
          "type": String,
        },
        Object {
          "decorators": Array [],
          "fields": Object {},
          "index": 1,
          "kind": "Parameter",
          "name": "par2",
          "owner": Array [
            SuperClass,
            MyClass,
          ],
          "type": Number,
        },
        Object {
          "decorators": Array [],
          "fields": Object {},
          "index": 2,
          "kind": "Parameter",
          "name": "par3",
          "owner": Array [
            SuperClass,
            MyClass,
          ],
          "type": Boolean,
        },
        Object {
          "decorators": Array [],
          "fields": Object {},
          "index": 3,
          "kind": "Parameter",
          "name": "par4",
          "owner": Array [
            SuperClass,
            MyClass,
          ],
          "type": Date,
        },
      ],
      "returnType": undefined,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Design Type Information and Inheritance Should able to add overridden method return type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        SuperClass,
        MyClass,
      ],
      "parameters": Array [],
      "returnType": Number,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Design Type Information and Inheritance Should not inherit constructor parameter type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 0,
        "kind": "Parameter",
        "name": "dif1",
        "owner": Array [
          MyClass,
        ],
        "type": String,
      },
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 1,
        "kind": "Parameter",
        "name": "dif2",
        "owner": Array [
          MyClass,
        ],
        "type": Number,
      },
    ],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 0,
      "isParameter": true,
      "kind": "Property",
      "name": "dif1",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
      "type": String,
    },
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 1,
      "isParameter": true,
      "kind": "Property",
      "name": "dif2",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
      "type": Number,
    },
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 0,
      "isParameter": true,
      "kind": "Property",
      "name": "par1",
      "owner": Array [
        SuperClass,
      ],
      "set": undefined,
      "type": String,
    },
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 1,
      "isParameter": true,
      "kind": "Property",
      "name": "par2",
      "owner": Array [
        SuperClass,
      ],
      "set": undefined,
      "type": Number,
    },
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 2,
      "isParameter": true,
      "kind": "Property",
      "name": "par3",
      "owner": Array [
        SuperClass,
      ],
      "set": undefined,
      "type": Boolean,
    },
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 3,
      "isParameter": true,
      "kind": "Property",
      "name": "par4",
      "owner": Array [
        SuperClass,
      ],
      "set": undefined,
      "type": Date,
    },
  ],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Generic Type Should able to add generic array information 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [
    Object {
      "kind": "GenericType",
      "target": MyClass,
      "types": Array [
        String,
      ],
      Symbol(tinspector:decoratorId): Symbol(genericType),
      Symbol(tinspector:decoratorOption): Object {
        "allowMultiple": false,
        "inherit": false,
      },
    },
  ],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [
        Object {
          "info": undefined,
          "kind": "Override",
          "target": SuperClass,
          "type": Array [
            "T",
          ],
          Symbol(tinspector:decoratorId): Symbol(override),
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": false,
            "inherit": true,
          },
        },
      ],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        SuperClass,
      ],
      "parameters": Array [],
      "returnType": Array [
        String,
      ],
    },
  ],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Generic Type Should able to add generic info on method parameter 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [
    Object {
      "kind": "GenericType",
      "target": MyClass,
      "types": Array [
        String,
      ],
      Symbol(tinspector:decoratorId): Symbol(genericType),
      Symbol(tinspector:decoratorOption): Object {
        "allowMultiple": false,
        "inherit": false,
      },
    },
  ],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        SuperClass,
      ],
      "parameters": Array [
        Object {
          "decorators": Array [
            Object {
              "info": undefined,
              "kind": "Override",
              "target": SuperClass,
              "type": "T",
              Symbol(tinspector:decoratorId): Symbol(override),
              Symbol(tinspector:decoratorOption): Object {
                "allowMultiple": false,
                "inherit": true,
              },
            },
          ],
          "fields": Object {},
          "index": 0,
          "kind": "Parameter",
          "name": "par1",
          "owner": Array [
            SuperClass,
          ],
          "type": String,
        },
      ],
      "returnType": undefined,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Generic Type Should able to add generic information 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [
    Object {
      "kind": "GenericType",
      "target": MyClass,
      "types": Array [
        String,
      ],
      Symbol(tinspector:decoratorId): Symbol(genericType),
      Symbol(tinspector:decoratorOption): Object {
        "allowMultiple": false,
        "inherit": false,
      },
    },
  ],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [
        Object {
          "info": undefined,
          "kind": "Override",
          "target": SuperClass,
          "type": "T",
          Symbol(tinspector:decoratorId): Symbol(override),
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": false,
            "inherit": true,
          },
        },
      ],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        SuperClass,
      ],
      "parameters": Array [],
      "returnType": String,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Generic Type Should able to add generic information on nested class 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [
    Object {
      "kind": "GenericType",
      "target": MyClass,
      "types": Array [
        Number,
      ],
      Symbol(tinspector:decoratorId): Symbol(genericType),
      Symbol(tinspector:decoratorOption): Object {
        "allowMultiple": false,
        "inherit": false,
      },
    },
  ],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [
        Object {
          "info": undefined,
          "kind": "Override",
          "target": SuperClass,
          "type": "T",
          Symbol(tinspector:decoratorId): Symbol(override),
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": false,
            "inherit": true,
          },
        },
      ],
      "kind": "Method",
      "name": "num",
      "owner": Array [
        SuperClass,
      ],
      "parameters": Array [],
      "returnType": Number,
    },
    Object {
      "decorators": Array [
        Object {
          "info": undefined,
          "kind": "Override",
          "target": GrandSuperClass,
          "type": "T",
          Symbol(tinspector:decoratorId): Symbol(override),
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": false,
            "inherit": true,
          },
        },
      ],
      "kind": "Method",
      "name": "str",
      "owner": Array [
        GrandSuperClass,
      ],
      "parameters": Array [],
      "returnType": String,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    Object,
    GrandSuperClass,
    SuperClass,
    MyClass,
  ],
  "properties": Array [],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Generic Type Should able to add generic information on nested class with multiple templates 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [
    Object {
      "kind": "GenericType",
      "target": MyClass,
      "types": Array [
        Number,
        Number,
      ],
      Symbol(tinspector:decoratorId): Symbol(genericType),
      Symbol(tinspector:decoratorOption): Object {
        "allowMultiple": false,
        "inherit": false,
      },
    },
  ],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [
        Object {
          "info": undefined,
          "kind": "Override",
          "target": SuperClass,
          "type": "T",
          Symbol(tinspector:decoratorId): Symbol(override),
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": false,
            "inherit": true,
          },
        },
      ],
      "kind": "Method",
      "name": "num",
      "owner": Array [
        SuperClass,
      ],
      "parameters": Array [
        Object {
          "decorators": Array [
            Object {
              "info": undefined,
              "kind": "Override",
              "target": SuperClass,
              "type": "U",
              Symbol(tinspector:decoratorId): Symbol(override),
              Symbol(tinspector:decoratorOption): Object {
                "allowMultiple": false,
                "inherit": true,
              },
            },
          ],
          "fields": Object {},
          "index": 0,
          "kind": "Parameter",
          "name": "par",
          "owner": Array [
            SuperClass,
          ],
          "type": Number,
        },
      ],
      "returnType": Number,
    },
    Object {
      "decorators": Array [
        Object {
          "info": undefined,
          "kind": "Override",
          "target": GrandSuperClass,
          "type": "T",
          Symbol(tinspector:decoratorId): Symbol(override),
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": false,
            "inherit": true,
          },
        },
      ],
      "kind": "Method",
      "name": "str",
      "owner": Array [
        GrandSuperClass,
      ],
      "parameters": Array [
        Object {
          "decorators": Array [
            Object {
              "info": undefined,
              "kind": "Override",
              "target": GrandSuperClass,
              "type": "U",
              Symbol(tinspector:decoratorId): Symbol(override),
              Symbol(tinspector:decoratorOption): Object {
                "allowMultiple": false,
                "inherit": true,
              },
            },
          ],
          "fields": Object {},
          "index": 0,
          "kind": "Parameter",
          "name": "par",
          "owner": Array [
            GrandSuperClass,
          ],
          "type": Number,
        },
      ],
      "returnType": String,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    Object,
    GrandSuperClass,
    SuperClass,
    MyClass,
  ],
  "properties": Array [],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Ignore Member Should able to ignore getter 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    Object,
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [
        Object {
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": true,
            "inherit": true,
          },
        },
      ],
      "get": get prop,
      "kind": "Property",
      "name": "prop",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
    },
  ],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Ignore Member Should able to ignore inherited method 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        SuperClass,
      ],
      "parameters": Array [],
      "returnType": undefined,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Ignore Member Should able to ignore method 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        MyClass,
      ],
      "parameters": Array [],
      "returnType": undefined,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    Object,
    MyClass,
  ],
  "properties": Array [],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Ignore Member Should able to ignore parameter properties 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 0,
        "kind": "Parameter",
        "name": "par1",
        "owner": Array [
          MyClass,
        ],
        "type": undefined,
      },
      Object {
        "decorators": Array [
          Object {
            "kind": "Ignore",
            Symbol(tinspector:decoratorId): Symbol(ignore),
            Symbol(tinspector:decoratorOption): Object {
              "allowMultiple": false,
              "inherit": true,
            },
          },
        ],
        "fields": Object {},
        "index": 1,
        "kind": "Parameter",
        "name": "ignored",
        "owner": Array [
          MyClass,
        ],
        "type": undefined,
      },
    ],
  },
  "decorators": Array [
    Object {
      "type": "ParameterProperties",
      Symbol(tinspector:decoratorId): Symbol(paramProp),
      Symbol(tinspector:decoratorOption): Object {
        "allowMultiple": false,
        "inherit": true,
      },
    },
  ],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    Object,
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 0,
      "isParameter": true,
      "kind": "Property",
      "name": "par1",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
      "type": undefined,
    },
  ],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Ignore Member Should able to ignore property 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    Object,
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [
        Object {
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": true,
            "inherit": true,
          },
        },
      ],
      "get": undefined,
      "kind": "Property",
      "name": "prop",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
    },
  ],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Inheritance Should able to add inheritance info 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Inheritance Should able to add methods inheritance info 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        SuperClass,
      ],
      "parameters": Array [
        Object {
          "decorators": Array [],
          "fields": Object {},
          "index": 0,
          "kind": "Parameter",
          "name": "par",
          "owner": Array [
            SuperClass,
          ],
          "type": undefined,
        },
      ],
      "returnType": undefined,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Parameter Properties Should able to inherit parameter properties 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [
    Object {
      "type": "ParameterProperties",
      Symbol(tinspector:decoratorId): Symbol(paramProp),
      Symbol(tinspector:decoratorOption): Object {
        "allowMultiple": false,
        "inherit": true,
      },
    },
  ],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 0,
      "isParameter": true,
      "kind": "Property",
      "name": "par1",
      "owner": Array [
        SuperClass,
      ],
      "set": undefined,
      "type": String,
    },
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 1,
      "isParameter": true,
      "kind": "Property",
      "name": "par2",
      "owner": Array [
        SuperClass,
      ],
      "set": undefined,
      "type": Number,
    },
  ],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Parameter Properties Should able to override any parameter properties 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 0,
        "kind": "Parameter",
        "name": "par2",
        "owner": Array [
          SuperClass,
          MyClass,
        ],
        "type": String,
      },
    ],
  },
  "decorators": Array [
    Object {
      "type": "ParameterProperties",
      Symbol(tinspector:decoratorId): Symbol(paramProp),
      Symbol(tinspector:decoratorOption): Object {
        "allowMultiple": false,
        "inherit": true,
      },
    },
  ],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 1,
      "isParameter": true,
      "kind": "Property",
      "name": "par2",
      "owner": Array [
        SuperClass,
        MyClass,
      ],
      "set": undefined,
      "type": Number,
    },
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 0,
      "isParameter": true,
      "kind": "Property",
      "name": "par1",
      "owner": Array [
        SuperClass,
      ],
      "set": undefined,
      "type": String,
    },
  ],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Parameter Properties Should able to override parameter properties 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 0,
        "kind": "Parameter",
        "name": "par1",
        "owner": Array [
          SuperClass,
          MyClass,
        ],
        "type": String,
      },
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 1,
        "kind": "Parameter",
        "name": "par2",
        "owner": Array [
          SuperClass,
          MyClass,
        ],
        "type": Number,
      },
    ],
  },
  "decorators": Array [
    Object {
      "type": "ParameterProperties",
      Symbol(tinspector:decoratorId): Symbol(paramProp),
      Symbol(tinspector:decoratorOption): Object {
        "allowMultiple": false,
        "inherit": true,
      },
    },
  ],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 0,
      "isParameter": true,
      "kind": "Property",
      "name": "par1",
      "owner": Array [
        SuperClass,
        MyClass,
      ],
      "set": undefined,
      "type": String,
    },
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 1,
      "isParameter": true,
      "kind": "Property",
      "name": "par2",
      "owner": Array [
        SuperClass,
        MyClass,
      ],
      "set": undefined,
      "type": Number,
    },
  ],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Parameter Properties Should able to override parameter properties in different order 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 0,
        "kind": "Parameter",
        "name": "par2",
        "owner": Array [
          SuperClass,
          MyClass,
        ],
        "type": String,
      },
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 1,
        "kind": "Parameter",
        "name": "par1",
        "owner": Array [
          SuperClass,
          MyClass,
        ],
        "type": Number,
      },
    ],
  },
  "decorators": Array [
    Object {
      "type": "ParameterProperties",
      Symbol(tinspector:decoratorId): Symbol(paramProp),
      Symbol(tinspector:decoratorOption): Object {
        "allowMultiple": false,
        "inherit": true,
      },
    },
  ],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    Object,
    SuperClass,
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 1,
      "isParameter": true,
      "kind": "Property",
      "name": "par2",
      "owner": Array [
        SuperClass,
        MyClass,
      ],
      "set": undefined,
      "type": Number,
    },
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 0,
      "isParameter": true,
      "kind": "Property",
      "name": "par1",
      "owner": Array [
        SuperClass,
        MyClass,
      ],
      "set": undefined,
      "type": String,
    },
  ],
  "super": SuperClass,
  "type": MyClass,
}
`;

exports[`Purifier Parameter Properties Should add parameter properties 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 0,
        "kind": "Parameter",
        "name": "par1",
        "owner": Array [
          MyClass,
        ],
        "type": String,
      },
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 1,
        "kind": "Parameter",
        "name": "par2",
        "owner": Array [
          MyClass,
        ],
        "type": Number,
      },
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 2,
        "kind": "Parameter",
        "name": "par3",
        "owner": Array [
          MyClass,
        ],
        "type": Boolean,
      },
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 3,
        "kind": "Parameter",
        "name": "par4",
        "owner": Array [
          MyClass,
        ],
        "type": Date,
      },
    ],
  },
  "decorators": Array [
    Object {
      "type": "ParameterProperties",
      Symbol(tinspector:decoratorId): Symbol(paramProp),
      Symbol(tinspector:decoratorOption): Object {
        "allowMultiple": false,
        "inherit": true,
      },
    },
  ],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    Object,
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 0,
      "isParameter": true,
      "kind": "Property",
      "name": "par1",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
      "type": String,
    },
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 1,
      "isParameter": true,
      "kind": "Property",
      "name": "par2",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
      "type": Number,
    },
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 2,
      "isParameter": true,
      "kind": "Property",
      "name": "par3",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
      "type": Boolean,
    },
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 3,
      "isParameter": true,
      "kind": "Property",
      "name": "par4",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
      "type": Date,
    },
  ],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Parameter Properties Should not add parameter properties if not specified 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 0,
        "kind": "Parameter",
        "name": "par1",
        "owner": Array [
          MyClass,
        ],
        "type": undefined,
      },
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 1,
        "kind": "Parameter",
        "name": "par2",
        "owner": Array [
          MyClass,
        ],
        "type": undefined,
      },
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 2,
        "kind": "Parameter",
        "name": "par3",
        "owner": Array [
          MyClass,
        ],
        "type": undefined,
      },
      Object {
        "decorators": Array [],
        "fields": Object {},
        "index": 3,
        "kind": "Parameter",
        "name": "par4",
        "owner": Array [
          MyClass,
        ],
        "type": undefined,
      },
    ],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    Object,
    MyClass,
  ],
  "properties": Array [],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Type Overridden Should able to override array type using @array 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [
        Object {
          "kind": "Array",
          "type": Number,
          Symbol(tinspector:decoratorId): Symbol(array),
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": false,
            "inherit": true,
          },
        },
      ],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        MyClass,
      ],
      "parameters": Array [],
      "returnType": Array [
        Number,
      ],
    },
  ],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Type Overridden Should able to override constructor parameter type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [
      Object {
        "decorators": Array [
          Object {
            "info": undefined,
            "kind": "Override",
            "target": MyClass,
            "type": Array [
              Number,
            ],
            Symbol(tinspector:decoratorId): Symbol(override),
            Symbol(tinspector:decoratorOption): Object {
              "allowMultiple": false,
              "inherit": true,
            },
          },
        ],
        "fields": Object {},
        "index": 0,
        "kind": "Parameter",
        "name": "nums",
        "owner": Array [
          MyClass,
        ],
        "type": Array [
          Number,
        ],
      },
    ],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [
        Object {
          "info": undefined,
          "kind": "Override",
          "target": MyClass,
          "type": Array [
            Number,
          ],
          Symbol(tinspector:decoratorId): Symbol(override),
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": false,
            "inherit": true,
          },
        },
      ],
      "get": undefined,
      "index": 0,
      "isParameter": true,
      "kind": "Property",
      "name": "nums",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
      "type": Array [
        Number,
      ],
    },
  ],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Type Overridden Should able to override constructor parameter type with custom type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [
      Object {
        "decorators": Array [
          Object {
            "info": undefined,
            "kind": "Override",
            "target": MyClass,
            "type": Array [
              CustomType,
            ],
            Symbol(tinspector:decoratorId): Symbol(override),
            Symbol(tinspector:decoratorOption): Object {
              "allowMultiple": false,
              "inherit": true,
            },
          },
        ],
        "fields": Object {},
        "index": 0,
        "kind": "Parameter",
        "name": "nums",
        "owner": Array [
          MyClass,
        ],
        "type": Array [
          CustomType,
        ],
      },
    ],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [
        Object {
          "info": undefined,
          "kind": "Override",
          "target": MyClass,
          "type": Array [
            CustomType,
          ],
          Symbol(tinspector:decoratorId): Symbol(override),
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": false,
            "inherit": true,
          },
        },
      ],
      "get": undefined,
      "index": 0,
      "isParameter": true,
      "kind": "Property",
      "name": "nums",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
      "type": Array [
        CustomType,
      ],
    },
  ],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Type Overridden Should able to override constructor parameter type with custom type with @array 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [
      Object {
        "decorators": Array [
          Object {
            "kind": "Array",
            "type": CustomType,
            Symbol(tinspector:decoratorId): Symbol(array),
            Symbol(tinspector:decoratorOption): Object {
              "allowMultiple": false,
              "inherit": true,
            },
          },
        ],
        "fields": Object {},
        "index": 0,
        "kind": "Parameter",
        "name": "nums",
        "owner": Array [
          MyClass,
        ],
        "type": Array [
          CustomType,
        ],
      },
    ],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [
    Object {
      "decorators": Array [
        Object {
          "kind": "Array",
          "type": CustomType,
          Symbol(tinspector:decoratorId): Symbol(array),
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": false,
            "inherit": true,
          },
        },
      ],
      "get": undefined,
      "index": 0,
      "isParameter": true,
      "kind": "Property",
      "name": "nums",
      "owner": Array [
        MyClass,
      ],
      "set": undefined,
      "type": Array [
        CustomType,
      ],
    },
  ],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Type Overridden Should able to override method parameter type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        MyClass,
      ],
      "parameters": Array [
        Object {
          "decorators": Array [
            Object {
              "info": undefined,
              "kind": "Override",
              "target": MyClass,
              "type": Array [
                Number,
              ],
              Symbol(tinspector:decoratorId): Symbol(override),
              Symbol(tinspector:decoratorOption): Object {
                "allowMultiple": false,
                "inherit": true,
              },
            },
          ],
          "fields": Object {},
          "index": 0,
          "kind": "Parameter",
          "name": "nums",
          "owner": Array [
            MyClass,
          ],
          "type": Array [
            Number,
          ],
        },
      ],
      "returnType": undefined,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Type Overridden Should able to override method parameter type with custom type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        MyClass,
      ],
      "parameters": Array [
        Object {
          "decorators": Array [
            Object {
              "info": undefined,
              "kind": "Override",
              "target": MyClass,
              "type": Array [
                CustomType,
              ],
              Symbol(tinspector:decoratorId): Symbol(override),
              Symbol(tinspector:decoratorOption): Object {
                "allowMultiple": false,
                "inherit": true,
              },
            },
          ],
          "fields": Object {},
          "index": 0,
          "kind": "Parameter",
          "name": "nums",
          "owner": Array [
            MyClass,
          ],
          "type": Array [
            CustomType,
          ],
        },
      ],
      "returnType": undefined,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Type Overridden Should able to override method parameter type with custom type with @array 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        MyClass,
      ],
      "parameters": Array [
        Object {
          "decorators": Array [
            Object {
              "kind": "Array",
              "type": CustomType,
              Symbol(tinspector:decoratorId): Symbol(array),
              Symbol(tinspector:decoratorOption): Object {
                "allowMultiple": false,
                "inherit": true,
              },
            },
          ],
          "fields": Object {},
          "index": 0,
          "kind": "Parameter",
          "name": "nums",
          "owner": Array [
            MyClass,
          ],
          "type": Array [
            CustomType,
          ],
        },
      ],
      "returnType": undefined,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Type Overridden Should able to override method return type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [
        Object {
          "info": undefined,
          "kind": "Override",
          "target": MyClass,
          "type": Number,
          Symbol(tinspector:decoratorId): Symbol(override),
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": false,
            "inherit": true,
          },
        },
      ],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        MyClass,
      ],
      "parameters": Array [],
      "returnType": Number,
    },
  ],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [],
  "super": Object,
  "type": MyClass,
}
`;

exports[`Purifier Type Overridden Should able to override method return type of array type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [
        Object {
          "info": undefined,
          "kind": "Override",
          "target": MyClass,
          "type": Array [
            Number,
          ],
          Symbol(tinspector:decoratorId): Symbol(override),
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": false,
            "inherit": true,
          },
        },
      ],
      "kind": "Method",
      "name": "method",
      "owner": Array [
        MyClass,
      ],
      "parameters": Array [],
      "returnType": Array [
        Number,
      ],
    },
  ],
  "name": "MyClass",
  "owner": Array [
    MyClass,
  ],
  "properties": Array [],
  "super": Object,
  "type": MyClass,
}
`;
